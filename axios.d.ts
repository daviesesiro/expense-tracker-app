/** Declaration file generated by dts-gen */

export = axios;

declare function axios(...args: any[]): any;

declare namespace axios {
    class Axios {
        constructor(instanceConfig: any);

        delete(url: any, config: any): any;

        get(url: any, config: any): any;

        getUri(config: any): any;

        head(url: any, config: any): any;

        options(url: any, config: any): any;

        patch(url: any, data: any, config: any): any;

        post(url: any, data: any, config: any): any;

        put(url: any, data: any, config: any): any;

        request(config: any, ...args: any[]): any;

    }

    class Cancel {
        constructor(message: any);

        toString(): any;

    }

    class CancelToken {
        constructor(executor: any);

        subscribe(listener: any): void;

        throwIfRequested(): void;

        unsubscribe(listener: any): void;

        static source(): any;

    }

    const VERSION: string;

    // Circular reference from axios
    const default: any;

    const interceptors: {
        request: {
            eject: any;
            forEach: any;
            handlers: any[];
            use: any;
        };
        response: {
            eject: any;
            forEach: any;
            handlers: any[];
            use: any;
        };
    };

    function all(promises: any): any;

    function create(instanceConfig: any): any;

    function get(...args: any[]): any;

    function getUri(...args: any[]): any;

    function head(...args: any[]): any;

    function isAxiosError(payload: any): any;

    function isCancel(value: any): any;

    function options(...args: any[]): any;

    function patch(...args: any[]): any;

    function post(...args: any[]): any;

    function put(...args: any[]): any;

    function request(...args: any[]): any;

    function spread(callback: any): any;

    namespace defaults {
        const headers: {
            common: {
                Accept: string;
            };
            delete: {
            };
            get: {
            };
            head: {
            };
            patch: {
                "Content-Type": string;
            };
            post: {
                "Content-Type": string;
            };
            put: {
                "Content-Type": string;
            };
        };

        const maxBodyLength: number;

        const maxContentLength: number;

        const timeout: number;

        const transformRequest: any[];

        const transformResponse: any[];

        const transitional: {
            clarifyTimeoutError: boolean;
            forcedJSONParsing: boolean;
            silentJSONParsing: boolean;
        };

        const xsrfCookieName: string;

        const xsrfHeaderName: string;

        function adapter(config: any): any;

        function validateStatus(status: any): any;

    }

}

